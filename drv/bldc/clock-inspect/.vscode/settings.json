{
  "rust-analyzer.server.extraEnv": {
    "HUBRIS_TASKS": "jefe,idle,sys,clock_inspect,hiffy",
    // "OUT_DIR": "/home/tim/git/hubris/target/bldc/dist",
    // "HUBRIS_APP_CONFIG": "name = \"bldc\"\ntarget = \"thumbv7em-none-eabihf\"\nboard = \"nucleo-h723zg\"\nchip = \"../../chips/stm32h735.toml\"\nstacksize = 896\n\n[kernel]\npath = \".\"\nname = \"bldc\"\nrequires = {flash = 21452, ram = 4096}\n#\n# For the kernel (and for any task that logs), we are required to enable\n# either \"itm\" (denoting logging/panicking via ARM's Instrumentation Trace\n# Macrocell) or \"semihosting\" (denoting logging/panicking via ARM\n# semihosting).  We are biased to ITM because semihosting is excruciatingly\n# slow (it is breakpoint based) and has an undesirable failure mode if logging\n# output is generated and debugger is not attached (namely, the target stops).\n# If one does choose to change this to semihosting for purposes of\n# development, be sure to also change it in every task of interest.\n#\nfeatures = [\"h735\", \"itm\"]\n\n[spi1]\naddress = 0x40013000\nsize = 1024\ninterrupts = { irq = 35 }\n\n# TODO(blakely): Figure out what the notification is for the supervisor.\n[supervisor]\nnotification = 1\n\n# H723 only has a single 1MB flash bank.\n[outputs.flash]\naddress = 0x08000000\nsize = 1048576\nread = true\nexecute = true\n\n# RAM reference: RM0468, Fig 1\n# The linker script generated by `build/xtask/src/dist.rs` assumes the stack is\n# placed in a section called `ram`. You must name one of the `outputs` sections\n# as `ram`, otherwise the linker will complain about a missing `STACK` variable.\n# Currently the stack is set to be in DTCM because why not? If we need more than\n# 128k we can switch to ITCM which - assuming the shared AXI memory is set to be\n# used as ITCM - is a total of 256KB.\n\n# This assumes that the shared 192KB between ITCM and AXI SRAM is assigned to\n# ITCM, giving a total of 64 + 192 = 256K. This is basically general-use RAM,\n# with a bus width of 64 bit. If we need more random access, we can prefer the\n# DTCM which is 2x32 bit.\n[outputs.itcm]\naddress = 0x00000000\nsize = 262144\nread = true\nwrite = true\nexecute = false  # let's assume XN until proven otherwise\n\n# DTCM RAM is 2x32 bit. This area is good for random access data, as it's\n# coupled to the core clock, _not_ the HCLK [citation needed]. Small, but fast.\n[outputs.ram]\naddress = 0x20000000\nsize = 131072\nread = true\nwrite = true\nexecute = false  # let's assume XN until proven otherwise\n\n# As far as priorities go, the smaller the number the higher the priority. For BLDC we use the\n# following:\n#\n#  0 - Jefe\n#  1 - sys and commutation\n#  2 - clocok-inspect (temporary)\n#  5 - Idle\n\n# The supervisor task\n[tasks.jefe]\npath = \"../../task/jefe\"\nname = \"task-jefe\"\npriority = 0\nrequires = {flash = 8192, ram = 2048}\nstart = true\nfeatures = [\"itm\"]\nstacksize = 1536\n\n[tasks.idle]\npath = \"../../task/idle\"\nname = \"task-idle\"\npriority = 5\nrequires = {flash = 128, ram = 256}\nstacksize = 256\nstart = true\n\n[tasks.sys]\npath = \"../../drv/stm32xx-sys\"\nname = \"drv-stm32xx-sys\"\nfeatures = [\"h735\"]\npriority = 1\nrequires = {flash = 2048, ram = 1024}\nuses = [\"rcc\", \"gpios1\", \"gpios3\"]\nstart = true\n\n[tasks.clock_inspect]\npath = \"../../drv/bldc/clock-inspect\"\nname = \"drv-clock-inspect\"\nfeatures = [\"stm32h7\", \"h735\"]\npriority = 2\nrequires = {flash = 2048, ram = 1024}\nstart = true\ntask-slots = [\"sys\"]\nuses = [\"rcc\"]\n\n[tasks.hiffy]\npath = \"../../task/hiffy\"\nname = \"task-hiffy\"\n# features = [\"h735\", \"stm32h7\", \"itm\", \"i2c\", \"gpio\", \"spi\"]\nfeatures = [\"h735\", \"stm32h7\", \"itm\", \"gpio\"]\npriority = 3\nrequires = {flash = 32768, ram = 32768 }\nstacksize = 2048\nstart = true\ntask-slots = [\"sys\", \"i2c_driver\"]\n\n[config]\n\n[config.spi.spi1]\ncontroller = 1\n\n[config.spi.spi1.mux_options.cn7_arduino]\noutputs = [\n    {port = \"A\", pins = [3], af = 5},\n    {port = \"B\", pins = [5], af = 5},\n]\ninput = {port = \"A\", pin = 6, af = 5}\n\n[config.spi.spi1.devices.pins]\nmux = \"cn7_arduino\"\ncs = {port = \"D\", pin = 14}\nclock_divider = \"DIV32\"\n\n[config.net]\n\n[config.net.sockets.echo]\nkind = \"udp\"\nowner = {name = \"udpecho\", notification = 1}\nport = 7\ntx = { packets = 3, bytes = 1024 }\nrx = { packets = 3, bytes = 1024 }\n",
    // "HUBRIS_TASK_CONFIG": "path = \"../../drv/bldc/clock-inspect\"\nname = \"drv-clock-inspect\"\nfeatures = [\"stm32h7\", \"h735\"]\npriority = 2\nrequires = {flash = 2048, ram = 1024}\nstart = true\ntask-slots = [\"sys\"]\nuses = [\"rcc\"]\n",
    // "HUBRIS_IMAGE_ID": "0123456",
    // "HUBRIS_KCONFIG": "(tasks:[(regions:(19,20,0,0,0,0,0,0),entry_point:134242305,initial_stack:536876544,priority:0,flags:(bits:1)),(regions:(21,22,0,0,0,0,0,0),entry_point:134239233,initial_stack:536879360,priority:5,flags:(bits:1)),(regions:(23,24,1,2,3,0,0,0),entry_point:134240257,initial_stack:536877952,priority:1,flags:(bits:1)),(regions:(25,26,1,0,0,0,0,0),entry_point:134283265,initial_stack:536878976,priority:2,flags:(bits:1)),(regions:(27,28,0,0,0,0,0,0),entry_point:134250497,initial_stack:536905728,priority:3,flags:(bits:1))],regions:[(base:0,size:32,attributes:(bits:0),reserved_zero:0),(base:1476543488,size:1024,attributes:(bits:11),reserved_zero:0),(base:1476526080,size:8192,attributes:(bits:11),reserved_zero:0),(base:1476536320,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073819648,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073756160,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073757184,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073820672,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073827840,size:1024,attributes:(bits:11),reserved_zero:0),(base:1476400128,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073760256,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073763328,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073764352,size:1024,attributes:(bits:11),reserved_zero:0),(base:1073765376,size:1024,attributes:(bits:11),reserved_zero:0),(base:1476402176,size:1024,attributes:(bits:11),reserved_zero:0),(base:1375752192,size:4096,attributes:(bits:11),reserved_zero:0),(base:1073905664,size:4096,attributes:(bits:11),reserved_zero:0),(base:1073909760,size:1024,attributes:(bits:11),reserved_zero:0),(base:1208095744,size:4096,attributes:(bits:11),reserved_zero:0),(base:134242304,size:8192,attributes:(bits:5),reserved_zero:0),(base:536875008,size:2048,attributes:(bits:3),reserved_zero:0),(base:134239232,size:128,attributes:(bits:5),reserved_zero:0),(base:536879104,size:256,attributes:(bits:3),reserved_zero:0),(base:134240256,size:2048,attributes:(bits:5),reserved_zero:0),(base:536877056,size:1024,attributes:(bits:3),reserved_zero:0),(base:134283264,size:2048,attributes:(bits:5),reserved_zero:0),(base:536878080,size:1024,attributes:(bits:3),reserved_zero:0),(base:134250496,size:32768,attributes:(bits:5),reserved_zero:0),(base:536903680,size:32768,attributes:(bits:3),reserved_zero:0)],irqs:[],supervisor_notification:1)"
  },
  "rust-analyzer.cargo.features": [
    "h735"
  ],
  "rust-analyzer.cargo.target": "thumbv7em-none-eabihf"
}
